@page "/Cleaning/delete"
@inject HotelApp2.Models.Hotel_DBContext DB
@using HotelApp2.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Cleaning</h1>

<h4 class="text-danger"><b>Are you sure you want to delete this?</b></h4>
<hr />

<div>
    @if (hcleaning is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">User</dt>
            <dd class="col-sm-10">@hcleaning.User.FirstName @hcleaning.User.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Date</dt>
            <dd class="col-sm-10">@hcleaning.Date</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Room Number</dt>
            <dd class="col-sm-10">@hcleaning.Room.Number</dd>
        </dl>
        <EditForm method="post" Model="hcleaning" OnValidSubmit="DeleteHCleaning" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(hcleaning is null)">Delete</button> |
            <a href="/Cleaning">Cancel</a>
        </EditForm>
    }
</div>

@code {
    HCleaning? hcleaning;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hcleaning = await DB.HCleanings.Include(c => c.User)
                                        .Include(c => c.Room)
                                        .FirstOrDefaultAsync(m => m.Id == Id);

        if (hcleaning is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteHCleaning()
    {
        HRoom room = await DB.HRooms.FirstOrDefaultAsync(r => r.Id == hcleaning.RoomId);
        room.CleaningStatusId = (byte)1;

        DB.HCleanings.Remove(hcleaning!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/Cleaning");
    }
}
