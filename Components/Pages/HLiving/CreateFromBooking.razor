@page "/Living/create/{idb:int}"
@using HModels
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@using HotelApp2.Controllers
@inject             Controllers.Room RoomController
@inject             Controllers.Living LivingController
@inject             Controllers.Booking BookingController
@inject HDRoomTypeC RoomTypeController
@inject BookingStatuses BookingStatusController
@inject             Controllers.GuestLiving GuestLivingController
@inject             Controllers.GuestBooking GuestBookingController

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin,Receptionist")]


<PageTitle>Create</PageTitle>

<h3>Living</h3>
<h4>Create</h4>
<hr />

<h5 class="text-danger">@message</h5>

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="HLiving" OnValidSubmit="AddHLiving" FormName="create" Enhance>
            <div class="mb-3">
                <label for="checkindate" class="form-label">Check-in Date:</label>
                <InputDate disabled id="checkindate" @bind-Value="@checkin" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="checkoutdate" class="form-label">CheckOutDate:</label>
                <InputDate disabled id="checkoutdate" @bind-Value="@checkout" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="comments" class="form-label">Comments:</label>
                <InputText id="comments" @bind-Value="@comments" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="roomid" class="form-label">Room number:</label>
                <InputSelect disabled id="roomid" class="form-control" @bind-Value="HLiving.RoomId">
                    @foreach (var room in rooms)
                    {
                        <option value="@room.Id">@room.Number</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="guestid" class="form-label">Guest:</label>
                <InputSelect disabled id="guestid" class="form-control" @bind-Value="HLiving.GuestId">
                    @foreach (var guest in guests)
                    {
                        <option value="@guest.Id">@guest.FirstName @guest.LastName</option>
                    }
                </InputSelect>
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div class="mb-3">
    <h4 class="text-success">@success</h4>
</div>

<div>
    <a href="/Living">Back to List</a>
</div>

@code {
    [Parameter]
    public int idb { get; set; }

    [SupplyParameterFromForm]
    public HModels.Living HLiving { get; set; } = new();

    private List<HModels.Room> rooms;
    private List<BookingStatus> statuses;
    private List<HModels.GuestLiving> guests;
    private List<HModels.Booking> bookings;

    private string message = "";
    private string success = "";

    private int number = 0;
    private DateTime checkin;
    private DateTime checkout;
    private decimal amount;
    private string comments;

    private short roomMem;
    private byte statusMem;
    private int guestMem;
    private int? bookingMem;

        HModels.Booking booking;

    private bool bookingEnabled;

    protected override async Task OnInitializedAsync()
    {
        HLiving = new();

        rooms = (await RoomController.Index()).ToList();
        statuses = (await BookingStatusController.Index()).ToList();
        guests = (await GuestLivingController.Index()).ToList();
        bookings = (await BookingController.Index()).ToList();

        if (idb != 0)
        {
            booking = (await BookingController.GetById(idb));
                HModels.GuestBooking guestBooking = (await GuestBookingController.GetById(booking.GuestId));
                HModels.GuestLiving guestLiving = new();
            if (!(await GuestLivingController.Index()).ToList().Any(g => g.PassportNumber == guestBooking.PassportNumber))
            {
                guestLiving.FirstName = guestBooking.FirstName;
                guestLiving.LastName = guestBooking.LastName;
                guestLiving.PassportNumber = guestBooking.PassportNumber;
                guestLiving.Email = guestBooking.Email;
                guestLiving.Phone = guestBooking.Phone;
                guestLiving.CountryId = guestBooking.CountryId;
                guestLiving.City = guestBooking.City;

                GuestLivingController.Create(guestLiving);
            }
            else
            {
                guestLiving = await GuestLivingController.GetPyPassportNumber(guestBooking.PassportNumber);
            }

            checkin = booking.CheckInDate;
            checkout = booking.CheckOutDate;
            comments = booking.Comments;
            HLiving.GuestId = guestLiving.Id;
            HLiving.RoomId = booking.RoomId;
        }
        else
        {
            if (bookingMem > 0)
            {
                HLiving.BookingId = bookingMem;
            }
            // else if (bookings != null)
            // {
            //     HLiving.BookingId = bookings.FirstOrDefault().Id;
            // }
            // else
            // {
            //     NavigationManager.NavigateTo("notfound");
            // }

            if (roomMem > 0)
            {
                HLiving.RoomId = (short)roomMem;
            }
            else if (rooms != null)
            {
                HLiving.RoomId = rooms.FirstOrDefault().Id;
            }
            else
            {
                NavigationManager.NavigateTo("notfound");
            }

            if (statusMem > 0)
            {
                HLiving.StatusId = (byte)statusMem;
            }
            else if (statuses.Count != 0)
            {
                HLiving.StatusId = statuses.FirstOrDefault().Id;
            }
            else
            {
                NavigationManager.NavigateTo("notfound");
            }

            if (guestMem > 0)
            {
                HLiving.GuestId = guestMem;
            }
            else if (guests.Count != 0)
            {
                HLiving.GuestId = guests.FirstOrDefault().Id;
            }
            else
            {
                NavigationManager.NavigateTo("notfound");
            }
        }
    }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddHLiving()
    {
        message = "";
        success = "";

        HLiving.CheckInDate = checkin;
        HLiving.CheckOutDate = checkout;

            message = (await LivingController.Create(HLiving));

        roomMem = HLiving.RoomId;
        statusMem = HLiving.StatusId;
        guestMem = HLiving.GuestId;
        bookingMem = HLiving.BookingId;

        OnInitializedAsync();

        // number = 0;

        // @if (checkin.Date < DateTime.Now.AddDays(-1))
        // {
        //     message = "Check-in Date can't be earlier than today";
        //     return;
        // }
        // @if (checkout.Date < checkin.Date)
        // {
        //     message = "Check-out Date can't be earlier than Check-in Date";
        //     return;
        // }
        // @if (DateTime.Now.Date < checkin.Date)
        // {
        //     message = "You can't create living, because today date is not in range of booking date";
        //     return;
        // }
        // @if(DateTime.Now.Date > checkout.Date)
        // {
        //     message = "You can't create living, because today date is not in range of booking date";
        //     return;
        // }
        // if (HLiving.RoomId == 0)
        // {
        //     message = "Select room";
        //     return;
        // }


        // DateTime today = DateTime.Today;
        // string numberDate = Convert.ToString(today.Year - 2000) + Convert.ToString(today.Month);

        // do
        // {
        //     Random random = new Random();
        //     int randomDigits = random.Next(100000, 1000000);
        //     number = Convert.ToInt32(numberDate + randomDigits.ToString());
        // } while (numberExists(number));


        // HLiving.Number = number;

        // int hours = (checkout - checkin).Hours + ((checkout - checkin).Days == 0 ? 1 : (checkout - checkin).Days) * 24;
        // HRoom room = await DB.HRooms.FindAsync(HLiving.RoomId);
        // HotelApp2.Models.HDRoomType roomType = await DB.HDRoomTypes.FindAsync(room.TypeId);

        // HLiving.Amount = roomType.Price * hours;
        // HLiving.Comments = comments != null ? comments : "";
        // HLiving.StatusId = (byte)1;
        // HLiving.BookingId = idb;

        // booking.StatusId = (byte)5;

        // room.AvailabilityStatusId = (byte)2;



        // message = "";
        // success = "Added successful!";
    }

    // bool numberExists(int number)
    // {
    //     return DB.HLivings.Any(b => b.Number == number);
    // }

    // void onChangeBooking()
    // {
    //     if (HLiving.BookingId.HasValue)
    //     {
    //         var selectedBooking = bookings.FirstOrDefault(b => b.Id == HLiving.BookingId);

    //         if (selectedBooking != null)
    //         {
    //             checkin = selectedBooking.CheckInDate;
    //             checkout = selectedBooking.CheckOutDate;
    //             amount = selectedBooking.Amount;
    //             comments = selectedBooking.Comments;
    //             HLiving.GuestId = selectedBooking.Guest.Id;

    //             //StateHasChanged();
    //         }
    //     }
    // }

    // void onChangeBEn()
    // {
    //     if (!bookingEnabled)
    //     {
    //         OnInitializedAsync();
    //     }
    // }
}
