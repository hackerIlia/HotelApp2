@page "/Hotel/Edit"
@page "/Hotel/Edit/{id:int}"

@using HotelApp2.Models;
@inject Models.Hotel_DBContext dbContext
@using HotelApp2;
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using System.Net.Mail
@rendermode InteractiveServer

<PageTitle>Edit hotel</PageTitle>

<h3>Hotel</h3>
<h4>Edit</h4>

<h5 class="text-danger">@message</h5>

<div class="row">
    <div class="col-md-3">
        <EditForm method="post" Model="@hotel" OnValidSubmit="SubmitForm" FormName="EditHotel" Enhance>
            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText class="form-control" type="text" @bind-Value="@name" />
            </div>

            <div class="mb-3">
                <label class="form-label">Phone</label>
                <InputText class="form-control" type="text" @bind-Value="@phone" />
            </div>

            <div class="mb-3">
                <label class="form-label">Email</label>
                <InputText class="form-control" type="text" @bind-Value="@email" />
            </div>

            <div class="mb-3">
                <label class="form-label">Country</label>
                <InputSelect class="form-control" @bind-Value="@countryId">
                    @foreach (var country in countries)
                    {
                        <option value="@country.Id">@country.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label">City</label>
                <InputText class="form-control" type="text" @bind-Value="@city" />
            </div>

            <div class="mb-3">
                <label class="form-label">Address</label>
                <InputText class="form-control" type="text" @bind-Value="@address" />
            </div>

            <button type="submit" class="btn btn-primary">Edit</button>
            <a href="Hotel" class="btn btn-info">Back to List</a>
        </EditForm>
    </div>
</div>
<div class="mb-3">
    <h4 class="text-success">@success</h4>
</div>



@code {
        [Parameter]
        public int Id { get; set; }

        [SupplyParameterFromForm]
        public HHotel hotel { get; set; } = new HHotel();

    private List<HDCountry> countries;

    private EditForm editForm;

    public string name;
    public string phone;
    public string email;
    public string city;
    public int countryId;
    public string address;

    string message = "";
    string success = "";

    protected override async Task OnInitializedAsync() 
    {
        countries = dbContext.HDCountries.ToList();

        hotel = dbContext.HHotels.FirstOrDefault(h => h.Id == Id);

        if(hotel is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            name = hotel.Name;
            phone = hotel.Phone;
            email = hotel.Email;
            countryId = hotel.CountryId;
            city = hotel.City;
            address = hotel.Address;
        }
    }

    private async Task SubmitForm()
    {
        success = "";
        message = "";

        @if (String.IsNullOrEmpty(name))
        {
            message = "Name is required";
            return;
        }
        @if (String.IsNullOrEmpty(phone))
        {
            message = "Phone is required";
            return;
        }
        @if (String.IsNullOrEmpty(email))
        {
            message = "Email is required";
            return;
        }
        @if (String.IsNullOrEmpty(city))
        {
            message = "City is required";
            return;
        }
        @if (String.IsNullOrEmpty(address))
        {
            message = "Address is required";
            return;
        }
        @if (name.Length > 20)
        {
            message = "Name length must be up to 20 symbols";
            return;
        }
        @if (phone.Length > 15)
        {
            message = "Phone length must be up to 15 symbols";
            return;
        }
        @if (email.Length > 100)
        {
            message = "Email length must be up to 100 symbols";
            return;
        }
        @if (city.Length > 25)
        {
            message = "City length must be up to 25 symbols";
            return;
        }
        @if (address.Length > 50)
        {
            message = "Name length must be up to 50 symbols";
            return;
        }
        @if (NameExists(name) && name != hotel.Name)
        {
            message = "This hotel already exists!";
            return;
        }
        @if (PhoneExists(phone) && phone != hotel.Phone)
        {
            message = "This phone is already registred!";
            return;
        }
        @if (!IsValidMail(email))
        {
            message = "This email is not valid!";
            return;
        }
        @if (EmailExists(email) && email != hotel.Email)
        {
            message = "This email is already registred!";
            return;
        }

        dbContext.Attach(hotel!).State = EntityState.Modified;

        try
        {
            success = "Editing...";

            hotel.Name = name;
            hotel.Phone = phone;
            hotel.Email = email;
            hotel.CountryId = (byte)countryId;
            hotel.City = city;
            hotel.Address = address;

            await dbContext.SaveChangesAsync();
            message = "";
            success = "Edited successful!";
        } catch (DbUpdateConcurrencyException)
        {
            if (!HotelExists(hotel.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
    }

    bool HotelExists(int id)
    {
        return dbContext.HHotels.Any(h => h.Id == id);
    }

    bool NameExists(string name)
    {
        return dbContext.HHotels.Any(h => h.Name == name);
    }
    bool PhoneExists(string phone)
    {
        return dbContext.HHotels.Any(h => h.Phone == phone);
    }
    bool EmailExists(string email)
    {
        return dbContext.HHotels.Any(h => h.Email == email);
    }

    private static bool IsValidMail(string email)
    {
        var valid = true;

        try
        {
            var emailAddress = new MailAddress(email);
        }
        catch
        {
            valid = false;
        }

        return valid;
    }
}