@page "/StaffFunction/delete"
@inject HotelApp2.Models.Hotel_DBContext DB
@using HotelApp2.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>Delete</PageTitle>

<h3>Staff Function</h3>

<h4 class="text-danger"><b>Are you sure you want to delete this?</b></h4>

<h5 class="text-danger">@message</h5>

@if (hstafffunction is null)
{
    <p><em>Loading...</em></p>
}
else {
    <dl class="row">
        <dt class="col-sm-2">Name</dt>
        <dd class="col-sm-10">@hstafffunction.Name</dd>
    </dl>
    <dl class="row">
        <dt class="col-sm-2">Salary Rate</dt>
        <dd class="col-sm-10">@hstafffunction.SalaryRate</dd>
    </dl>
    <EditForm method="post" Model="hstafffunction" OnValidSubmit="DeleteHStaffFunction" FormName="delete" Enhance>
        <button type="submit" class="btn btn-danger" disabled="@(hstafffunction is null)">Delete</button> |
        <a href="/StaffFunction">Cancel</a>
    </EditForm>
}

@code {
    HStaffFunction? hstafffunction;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        hstafffunction = await DB.HStaffFunctions.FirstOrDefaultAsync(m => m.Id == Id);

        if (hstafffunction is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteHStaffFunction()
    {
        message = "";

        if (hstafffunction!.HStaffs.Count != 0)
        {
            message = "This Staff Function has related staffs. You can't delete it";
            return;
        }

        DB.HStaffFunctions.Remove(hstafffunction!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/StaffFunction");
    }
}
