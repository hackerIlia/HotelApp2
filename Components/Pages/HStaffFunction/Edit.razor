@page "/StaffFunction/edit"
@inject HotelApp2.Models.Hotel_DBContext DB
@using HotelApp2.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Edit</PageTitle>

<h3>Staff Function</h3>
<h4>Edit</h4>


@if (HStaffFunction is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h4 class="text-danger">@message</h4>

    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="HStaffFunction" OnValidSubmit="UpdateHStaffFunction" FormName="edit" Enhance>
                <input type="hidden" name="HStaffFunction.Id" value="@HStaffFunction.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="@name" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="salaryrate" class="form-label">Salary Rate:</label>
                    <InputNumber id="salaryrate" @bind-Value="@salaryRate" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary">Edit</button>
                <a href="/StaffFunction" class="btn btn-info">Back to List</a>
            </EditForm>
        </div>
    </div>

    <div class="mb-3">
        <h4 class="text-success">@success</h4>
    </div>
}


@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public HStaffFunction? HStaffFunction { get; set; }

    private string message = "";
    private string success = "";

    private string name;
    private decimal? salaryRate;

    protected override async Task OnInitializedAsync()
    {
        HStaffFunction ??= await DB.HStaffFunctions.FirstOrDefaultAsync(m => m.Id == Id);

        if (HStaffFunction is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            name = HStaffFunction.Name;
            salaryRate = HStaffFunction.SalaryRate;
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateHStaffFunction()
    {
        message = "";
        success = "";

        @if (String.IsNullOrEmpty(name))
        {
            message = "Name is required";
            return;
        }
        @if (name.Length > 20)
        {
            message = "Name length must be up to 20 symbols";
            return;
        }
        @if (NameExists(name) && name != HStaffFunction.Name)
        {
            message = "This function is already registred";
            return;
        }
        @if (salaryRate <= 0 || salaryRate >= 1000)
        {
            message = "Salary Rate can be in interval [0.01;999.99]";
            return;
        }

        DB.Attach(HStaffFunction!).State = EntityState.Modified;

        try
        {
            success = "Editing...";

            HStaffFunction.Name = name;
            HStaffFunction.SalaryRate = salaryRate;

            await DB.SaveChangesAsync();

            message = "";
            success = "Edited successful!";
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!HStaffFunctionExists(HStaffFunction!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
    }

    bool HStaffFunctionExists(byte id)
    {
        return DB.HStaffFunctions.Any(e => e.Id == id);
    }

    bool NameExists(string name)
    {
        return DB.HStaffFunctions.Any(f => f.Name == name);
    }
}
