@page "/RoomType/Delete"
@page "/RoomType/Delete/{id:int}"
@using HotelApp2.Controllers
@using HotelApp2.Models;
@inject Models.Hotel_DBContext dbContext
@using Microsoft.EntityFrameworkCore
@using HotelApp2;
@inject NavigationManager NavigationManager
@inject HDRoomTypeC RoomTypeController
@rendermode InteractiveServer

<PageTitle>Delete</PageTitle>

<h3>Room Type</h3>

<h4 class="text-danger"><b>Are you sure you want to delete this?</b></h4>

<h5 class="text-danger">@message</h5>

@if (type is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <dl class="row">
        <dt class="col-sm-2">Name</dt>
        <dd class="col-sm-10">@type.Name</dd>
    </dl>
    <dl class="row">
        <dt class="col-sm-2">Capacity</dt>
        <dd class="col-sm-10">@type.Capacity</dd>
    </dl>
    <dl class="row">
        <dt class="col-sm-2">Price</dt>
        <dd class="col-sm-10">@type.Price</dd>
    </dl>
    <EditForm method="post" Model="type" OnValidSubmit="DeleteType" FormName="delete" Enhance>
        <button type="submit" class="btn btn-danger" disabled="@(type is null)">Delete</button>
        <a href="RoomType" class="btn btn-info">Cancel</a>
    </EditForm>
}

@code {
    HModels.RoomType? type;

    [Parameter]
    public int Id { get; set; }

    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        type = await RoomTypeController.GetById(Id);

        if (type is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteType()
    {
        message = "";
        // if(type!.HRooms.Count != 0)
        // {
        //     message = "This type has related rooms. You can't delete it";
        //     return;
        // }

        type.Id = (byte)Id;
        message = await RoomTypeController.Delete(type);
        NavigationManager.NavigateTo("/RoomType");
    }
}