@page "/HLivings/edit"
@inject HotelApp2.Models.Hotel_DBContext DB
@using HotelApp2.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>HLiving</h4>
<hr />
@if (HLiving is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="HLiving" OnValidSubmit="UpdateHLiving" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="HLiving.Id" value="@HLiving.Id" />
                <div class="mb-3">
                    <label for="number" class="form-label">Number:</label>
                    <InputNumber id="number" @bind-Value="HLiving.Number" class="form-control" />
                    <ValidationMessage For="() => HLiving.Number" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="checkindate" class="form-label">CheckInDate:</label>
                    <InputDate id="checkindate" @bind-Value="HLiving.CheckInDate" class="form-control" />
                    <ValidationMessage For="() => HLiving.CheckInDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="checkoutdate" class="form-label">CheckOutDate:</label>
                    <InputDate id="checkoutdate" @bind-Value="HLiving.CheckOutDate" class="form-control" />
                    <ValidationMessage For="() => HLiving.CheckOutDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="amount" class="form-label">Amount:</label>
                    <InputNumber id="amount" @bind-Value="HLiving.Amount" class="form-control" />
                    <ValidationMessage For="() => HLiving.Amount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="comments" class="form-label">Comments:</label>
                    <InputText id="comments" @bind-Value="HLiving.Comments" class="form-control" />
                    <ValidationMessage For="() => HLiving.Comments" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="roomid" class="form-label">RoomId:</label>
                    <InputNumber id="roomid" @bind-Value="HLiving.RoomId" class="form-control" />
                    <ValidationMessage For="() => HLiving.RoomId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="statusid" class="form-label">StatusId:</label>
                    <InputText id="statusid" @bind-Value="HLiving.StatusId" class="form-control" />
                    <ValidationMessage For="() => HLiving.StatusId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="bookingid" class="form-label">BookingId:</label>
                    <InputNumber id="bookingid" @bind-Value="HLiving.BookingId" class="form-control" />
                    <ValidationMessage For="() => HLiving.BookingId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="guestid" class="form-label">GuestId:</label>
                    <InputNumber id="guestid" @bind-Value="HLiving.GuestId" class="form-control" />
                    <ValidationMessage For="() => HLiving.GuestId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/hlivings">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public HLiving? HLiving { get; set; }

    protected override async Task OnInitializedAsync()
    {
        HLiving ??= await DB.HLivings.FirstOrDefaultAsync(m => m.Id == Id);

        if (HLiving is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateHLiving()
    {
        DB.Attach(HLiving!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!HLivingExists(HLiving!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/hlivings");
    }

    bool HLivingExists(int id)
    {
        return DB.HLivings.Any(e => e.Id == id);
    }
}
