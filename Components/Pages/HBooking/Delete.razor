@page "/Booking/delete"
@inject HotelApp2.Models.Hotel_DBContext DB
@using HotelApp2.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Booking</h1>

<h4 class="text-danger"><b>Are you sure you want to delete this?</b></h4>
<hr />

<h5 class="text-danger">@message</h5>

<div>
    @if (hbooking is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Number</dt>
            <dd class="col-sm-10">@hbooking.Number</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Check-in Date</dt>
            <dd class="col-sm-10">@hbooking.CheckInDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Check-out Date</dt>
            <dd class="col-sm-10">@hbooking.CheckOutDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Amount</dt>
            <dd class="col-sm-10">@hbooking.Amount</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Comments</dt>
            <dd class="col-sm-10">@hbooking.Comments</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Room Number</dt>
            <dd class="col-sm-10">@hbooking.Room.Number</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@hbooking.Status.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Guest</dt>
            <dd class="col-sm-10">@hbooking.Guest.FirstName @hbooking.Guest.LastName</dd>
        </dl>
        <EditForm method="post" Model="hbooking" OnValidSubmit="DeleteHBooking" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(hbooking is null)">Delete</button> |
            <a href="/Booking">Back to List</a>
        </EditForm>
    }
</div>

@code {
    HBooking? hbooking;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        hbooking = await DB.HBookings.Include(b => b.Guest)
                                     .Include(b => b.Status)
                                     .Include(b => b.Room)
                                    .FirstOrDefaultAsync(m => m.Id == Id);

        if (hbooking is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteHBooking()
    {
        message = "";

        if (hbooking!.HPayments != null)
        {
            message = "This booking has related payments. You can't delete it";
            return;
        }
        else if (hbooking!.HLivings != null)
        {
            message = "This booking has related livings. You can't delete it";
            return;
        }

        DB.HBookings.Remove(hbooking!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/Booking");
    }
}
