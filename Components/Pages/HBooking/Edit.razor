@page "/Booking/edit"
@inject HotelApp2.Models.Hotel_DBContext DB
@using HotelApp2.Controllers
@using HModels
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@inject Booking BookingController
@inject Room RoomController
@inject HDRoomTypeC RoomTypeController
@inject BookingStatuses BookingStatusController
@inject GuestBooking GuestBookingController

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin,Receptionist")]

<PageTitle>Edit</PageTitle>

<h3>Booking</h3>
<h4>Edit</h4>
<hr />

@if (HBooking is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h5 class="text-danger">@message</h5>

    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="HBooking" OnValidSubmit="UpdateHBooking" FormName="edit" Enhance>
                <div class="mb-3">
                    <label for="checkindate" class="form-label">Check-in Date:</label>
                    <InputDate id="checkindate" @bind-Value="@checkin" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="checkoutdate" class="form-label">Check-out Date:</label>
                    <InputDate id="checkoutdate" @bind-Value="@checkout" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="comments" class="form-label">Comments:</label>
                    <InputText id="comments" @bind-Value="@comments" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="typeid" class="form-label">Room type:</label>
                    <InputSelect id="typeid" class="form-control" @bind-Value="@typeRoom" @onblur="onChangeCheckDate">
                        @foreach (var type in types)
                        {
                            <option value="@type.Id">@type.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="roomid" class="form-label">Room number:</label>
                    <InputSelect id="roomid" class="form-control" @bind-Value="HBooking.RoomId">
                        @foreach (var room in rooms)
                        {
                            <option value="@room.Id">@room.Number</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="guestid" class="form-label">Guest:</label>
                    <InputSelect id="guestid" class="form-control" @bind-Value="HBooking.GuestId">
                        @foreach (var guest in guests)
                        {
                            <option value="@guest.Id">@guest.FirstName @guest.LastName</option>
                        }
                    </InputSelect>
                </div>
                <button type="submit" class="btn btn-primary">Edit</button>
                <a href="/Booking" class="btn btn-info">Back to List</a>
            </EditForm>
        </div>
    </div>

    <div class="mb-3">
        <h4 class="text-success">@success</h4>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public HBooking? HBooking { get; set; }

    private List<HRoom> rooms;
    private List<HDBookingStatus> statuses;
    private List<HGuestBooking> guests;
    private List<HDRoomType> types;


    private string message = "";
    private string success = "";

    private DateTime checkin;
    private DateTime checkout;
    private decimal amount;
    private string comments;

    private byte typeRoom;

    private short roomMem;
    private byte statusMem;
    private int guestMem;


    protected override async Task OnInitializedAsync()
    {
        rooms = RoomController.Index().ToList();
        statuses = BookingStatusController.Index().ToList();
        guests = GuestBookingController.Index().ToList();
        types = RoomTypeController.Index().ToList();


        HBooking ??= BookingController.GetById(Id); 

        if (HBooking is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            checkin = HBooking.CheckInDate;
            checkout = HBooking.CheckOutDate;
            amount = HBooking.Amount;
            comments = HBooking.Comments;

            typeRoom = RoomController.GetById(HBooking.RoomId).TypeId;


            List<HRoom> allRooms = RoomController.Index().ToList();

            List<HRoom> roomsBookingSTOP = allRooms.Where(r => r.HBookings.Where(b => b.CheckInDate <= checkin && b.CheckOutDate >= checkout).Any()).ToList();
            rooms = allRooms.Except(roomsBookingSTOP).Where(r => r.TypeId == typeRoom).ToList();

            if (!rooms.Any(r => r.Id == HBooking.RoomId))
            {
                rooms.Add(RoomController.GetById(HBooking.RoomId));
            }
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateHBooking()
    {
        message = "";
        success = "";

        // @if (checkin < DateTime.Now.AddDays(-1))
        // {
        //     message = "Check-in Date can't be earlier than today";
        //     return;
        // }
        // @if (checkout.Date < checkin.Date)
        // {
        //     message = "Check-out Date can't be earlier than Check-in Date";
        //     return;
        // }

        // DB.Attach(HBooking!).State = EntityState.Modified;

        // try
        // {
        //     success = "Editing...";

            HBooking.CheckInDate = checkin;
            HBooking.CheckOutDate = checkout;
            HBooking.Amount = amount;
            HBooking.Comments = comments;

            message = BookingController.Edit(HBooking);


        //     await DB.SaveChangesAsync();

        //     message = "";
        //     success = "Edited successful!";
        // }
        // catch (DbUpdateConcurrencyException)
        // {
        //     if (!HBookingExists(HBooking!.Id))
        //     {
        //         NavigationManager.NavigateTo("notfound");
        //     }
        //     else
        //     {
        //         throw;
        //     }
        // }
    }

    // bool HBookingExists(int id)
    // {
    //     return DB.HBookings.Any(e => e.Id == id);
    // }

    void onChangeCheckDate()
    {
        List<HModels.HRoom> allRooms = RoomController.Index().ToList();

        List<HModels.HRoom> roomsBookingSTOP = allRooms
            .Where(r => r.HBookings.Any(b => b.CheckInDate.Date <= checkin.Date && b.CheckOutDate.Date >= checkout.Date))
            .ToList();

        rooms = allRooms
            .Except(roomsBookingSTOP)
            .Where(r => r.CleaningStatusId == 5 && r.TypeId == typeRoom)
            .ToList();

        HBooking.RoomId = rooms.FirstOrDefault()?.Id ?? (byte)0;

        // //List<HBooking> bookingsSTOP = DB.HBookings.Where(b => b.CheckInDate <= checkin && b.CheckOutDate >= checkout).ToList();
        // List<HRoom> roomsBookingSTOP = DB.HRooms.Where(r => r.HBookings.Where(b => b.CheckInDate <= checkin && b.CheckOutDate >= checkout).Any()).ToList();
        // rooms = DB.HRooms.ToList().Except(roomsBookingSTOP).Where(r => r.TypeId == typeRoom).ToList();

        // if (!rooms.Any(r => r.Id == HBooking.RoomId))
        // {
        //     rooms.Add(DB.HRooms.FirstOrDefault(r => r.Id == HBooking.RoomId));
        // }
        // //.Add(DB.HRooms.Where(r => r.Id == HBooking.RoomId))
    }
}
