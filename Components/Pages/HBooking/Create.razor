@page "/Booking/create"
@using HModels;
@using System.Text
@inject NavigationManager NavigationManager
@using HotelApp2.Controllers
@inject             Controllers.Booking BookingController
@inject             Controllers.Room RoomController
@inject HDRoomTypeC RoomTypeController
@inject BookingStatuses BookingStatusController
@inject             Controllers.GuestBooking GuestBookingController

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin,Receptionist")]

<PageTitle>Create</PageTitle>

<h3>Booking</h3>
<h4>Create</h4>
<hr />

<h5>@((MarkupString)message)</h5>

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="HBooking" OnValidSubmit="AddHBooking" FormName="create" Enhance>
            <div class="mb-3">
                <label for="checkindate" class="form-label">Check-in Date:</label>
                <InputDate min="2024-01-01" max="2070-01-01" id="checkindate" @bind-Value="@checkin" @onblur="onChangeCheckDate" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="checkoutdate" class="form-label">Check-out Date:</label>
                <InputDate min="2024-01-01" max="2070-01-01" id="checkoutdate" @bind-Value="@checkout" @onblur="onChangeCheckDate" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="comments" class="form-label">Comments:</label>
                <InputText id="comments" @bind-Value="@comments" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="typeid" class="form-label">Room type:</label>
                <InputSelect id="typeid" class="form-control" @bind-Value="@typeRoom" @onblur="onChangeCheckDate">
                    @foreach (var type in types)
                    {
                        <option value="@type.Id">@type.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="roomid" class="form-label">Room number:</label>
                <InputSelect id="roomid" class="form-control" @bind-Value="HBooking.RoomId">
                    @foreach (var room in rooms)
                    {
                        <option value="@room.Id">@room.Number</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="guestid" class="form-label">Guest:</label>
                <InputSelect id="guestid" class="form-control" @bind-Value="HBooking.GuestId">
                    @foreach (var guest in guests)
                    {
                        <option value="@guest.Id">@guest.FirstName @guest.LastName</option>
                    }
                </InputSelect>
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div class="mb-3">
    <h4 class="text-success">@success</h4>
</div>

<div>
    <a href="/Booking">Back to List</a>
</div>

@code {
    private int number = 0;
    private DateTime checkin = DateTime.Now;
    private DateTime checkout = DateTime.Now.AddDays(1);
    private decimal amount;
    private string comments;

    [SupplyParameterFromForm]
    public HModels.Booking HBooking { get; set; } = new();

    private List<HModels.Room> rooms;
    private List<BookingStatus> statuses;
    private List<HModels.GuestBooking> guests;
    private List<RoomType> types;

    private string message = "";
    private string success = "";


    private byte typeRoom;

    private short roomMem;
    private byte statusMem;
    private int guestMem;
    private byte typeMem;

    protected override async Task OnInitializedAsync()
    {
        HBooking = new();
        rooms = (await RoomController.Index()).ToList();

        if (rooms.Count > 0)
        {
            HBooking.RoomId = rooms.FirstOrDefault().Id;
        }
        else
        {
            NavigationManager.NavigateTo("notfound");
        }

        statuses =  (await BookingStatusController.Index()).ToList();
        guests =  (await GuestBookingController.Index()).ToList();
        types =  (await RoomTypeController.Index()).ToList();

        // if (typeMem > 0)
        // {
        //     typeRoom = typeMem;
        // }
        // else 
        if (types != null)
        {
            typeRoom = types.FirstOrDefault().Id;
        }
        else
        {
            NavigationManager.NavigateTo("notfound");
        }

        // if (roomMem > 0)
        // {
        //     HBooking.RoomId = (short)roomMem;
        // }
        // else 

        if (statusMem > 0)
        {
            HBooking.StatusId = (byte)statusMem;
        }
        else if (statuses != null)
        {
            HBooking.StatusId = statuses.FirstOrDefault().Id;
        }
        else
        {
            NavigationManager.NavigateTo("notfound");
        }

        if (guestMem > 0)
        {
            HBooking.GuestId = guestMem;
        }
        else if (guests != null)
        {
            HBooking.GuestId = guests.FirstOrDefault().Id;
        }
        else
        {
            NavigationManager.NavigateTo("notfound");
        }

        onChangeCheckDate();
    }


    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddHBooking()
    {
        message = "";
        success = "";

        HBooking.Number = number;
        HBooking.CheckInDate = checkin;
        HBooking.CheckOutDate = checkout;

        roomMem = HBooking.RoomId;
        statusMem = HBooking.StatusId;
        guestMem = HBooking.GuestId;
        typeMem = typeRoom;

        message = (await BookingController.Create(HBooking));
        string[] messageSplit = message.Split(";");

        if (messageSplit[0].Equals("Error"))
        {
            message = $"<span class='text-danger'>{messageSplit[1]}</span>";
        }
        else if (messageSplit[0].Equals("Success"))
        {
            message = $"<span class='text-success'>" + messageSplit[1] + "</span>";
        }

        OnInitializedAsync();
    }

    async Task onChangeCheckDate()
    {
            // List<HRoom> allRooms = RoomController.Index().ToList();
            // List<HRoom> roomsBookingSTOP = DB.HRooms.Where(r => r.HBookings.Where(b => b.CheckInDate <= checkin && b.CheckOutDate >= checkout).Any()).ToList();
            // rooms = DB.HRooms.ToList().Except(roomsBookingSTOP).Except(DB.HRooms.Where(r => r.CleaningStatusId != 5)).Where(r => r.TypeId == typeRoom).ToList();
            // List<HModels.HRoom> roomsBookingSTOP = allRooms.Where(r => r.HBookings.Where(b => b.CheckInDate.Date <= checkin.Date && b.CheckOutDate.Date >= checkout.Date).Any()).ToList();
            // rooms = allRooms.Except(roomsBookingSTOP).Except(RoomController.Index().ToList().Where(r => r.CleaningStatusId != 5)).Where(r => r.TypeId == typeRoom).ToList();
            // HBooking.RoomId = rooms.FirstOrDefault()?.Id ?? (byte)0;

            List<HModels.Room> allRooms = (await RoomController.Index()).ToList<HModels.Room>();

            List<HModels.Room> roomsBookingSTOP = allRooms
            .Where<HModels.Room>(r => r.HBookings.Where(b => b.CheckInDate.Date <= checkin.Date && b.CheckOutDate.Date >= checkout.Date).Any())
            .ToList();

        rooms = allRooms
            .Except(roomsBookingSTOP)
            .Where(r => r.CleaningStatusId == 5 && r.TypeId == typeRoom)
            .ToList();

        //without verifying cleaning status
        // rooms = allRooms
        //     .Except(roomsBookingSTOP)
        //     .Where(r => r.TypeId == typeRoom)
        //     .ToList();

        HBooking.RoomId = rooms.FirstOrDefault()?.Id ?? (byte)0;
    }

    // void onChangeCheckDate()
    // {
    //     var bookedRoomIds = RoomController.Index()
    //         .Where(r => r.HBookings.Where(b => b.CheckInDate <= checkin && b.CheckOutDate >= checkout).Any())
    //         //.Select(r => r.Id)
    //         .ToList();

    //     var cleaningRoomIds = RoomController.Index()
    //         .Where(r => r.CleaningStatusId != 5)
    //         //.Select(r => r.Id)
    //         .ToList();

    //     rooms = RoomController.Index().Except(cleaningRoomIds).Except(bookedRoomIds)
    //         // .Where(r => !bookedRoomIds.Contains(r) && !cleaningRoomIds.Contains(r) && r.TypeId == typeRoom)
    //         .ToList();

    //     HBooking.RoomId = rooms.FirstOrDefault()?.Id ?? (byte)0;
    // }

}
