@page "/User/delete"
@inject HotelApp2.Models.Hotel_DBContext DB
@using HotelApp2.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer


@attribute [Authorize(Roles = "Admin")]

<PageTitle>Delete</PageTitle>

<h1>User</h1>

<h4 class="text-danger"><b>Are you sure you want to delete this?</b></h4>
<hr />

<h5 class="text-danger">@message</h5>

<div>
    @if (huser is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Login</dt>
            <dd class="col-sm-10">@huser.Login</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Password</dt>
            <dd class="col-sm-10">@huser.Password</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">First Name</dt>
            <dd class="col-sm-10">@huser.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Last Name</dt>
            <dd class="col-sm-10">@huser.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@huser.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Staff</dt>
            <dd class="col-sm-10">@huser.Staff.FirstName @huser.Staff.LastName</dd>
        </dl>
        <EditForm method="post" Model="huser" OnValidSubmit="DeleteHUser" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(huser is null)">Delete</button> |
            <a href="/User">Back to List</a>
        </EditForm>
    }
</div>

@code {
    HUser? huser;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        huser = await DB.HUsers.Include(u => u.Staff).Include(u => u.IdRoles).FirstOrDefaultAsync(m => m.Id == Id);

        if (huser is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteHUser()
    {
        message = "";

        if (huser!.HFeedbacks.Count != 0)
        {
            message = "This user has related feedbacks. You can't delete it";
            return;
        }
        else if (huser!.HCleanings.Count != 0)
        {
            message = "This user has related cleanings. You can't delete it";
            return;
        }
        else if (huser!.HFeedbackAnswers.Count != 0)
        {
            message = "This user has feedback answers. You can't delete it";
            return;
        }
        else if (huser!.HUsersActions.Count != 0)
        {
            message = "This user has actions. You can't delete it";
            return;
        }
        else if (huser!.IdRoles.Count != 0)
        {
            message = "This user has roles. You can't delete it";
            return;
        }

        // HDUserRole role = await DB.HDUserRoles.FirstOrDefaultAsync(r => r.IdUsers.Contains(huser));
         
        // DB.HDUserRoles.Remove(role!);

        foreach (var role in huser!.IdRoles.ToList())
        {
            huser!.IdRoles.Remove(role);
        }



        DB.HUsers.Remove(huser!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/User");
    }
}
